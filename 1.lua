local a=string.char;local b=0;local c=0;local function d(e,f)local g=0;local h=1;while e>0 or f>0 do local i=e%2;local j=f%2;if i==1 or j==1 then g=g+h end;e=math.floor(e/2)f=math.floor(f/2)h=h*2 end;return g end;local function k(e,f)local g=0;local h=1;while e>0 and f>0 do local i=e%2;local j=f%2;if i==1 and j==1 then g=g+h end;e=math.floor(e/2)f=math.floor(f/2)h=h*2 end;return g end;local function l(e,f)local g=0;local h=1;while e>0 or f>0 do local i=e%2;local j=f%2;if i~=j then g=g+h end;e=math.floor(e/2)f=math.floor(f/2)h=h*2 end;return g end;local function m(e,n)return math.floor(e/2^n)end;local function o(e,n)return m(e,n)end;local function p(q,r)if q<0 then q=q+256 end;return q%r end;local s=""local t={}local function u(n,v)if n<0 then n=n+65536 end;table.insert(t,a(v,math.floor(n/256),n%256))end;local function w(n,v)if n<0 then n=n+4294967296 end;table.insert(t,a(v,math.floor(n/16777216),math.floor(n/65536)%256,math.floor(n/256)%256,n%256))end;local x;local y=function(n)c=c+1;local f=x(n)table.insert(t,a(0xcb))table.insert(t,string.reverse(f))end;x=function(q)local function z(r)return math.floor(r/256),a(math.fmod(math.floor(r),256))end;local A=0;if q<0 then A=1;q=-q end;local B,C=math.frexp(q)if q==0 then B,C=0,0 elseif q==1/0 then B,C=0,2047 else B=(B*2-1)*math.ldexp(0.5,53)C=C+1022 end;local r,D=""q=B;for E=1,6 do q,D=z(q)r=r..D end;q,D=z(C*16+q)r=r..D;q,D=z(A*128+q)r=r..D;return r end;local function F(G)local q=0;local H=0.5;for E,r in ipairs(G)do q=q+H*r;H=H/2 end;return q end;local function I(G)local J={}for E,r in ipairs(G)do for K=0,7,1 do table.insert(J,k(m(r,7-K),1))end end;return J end;local function L(G)local M=""for E,r in ipairs(G)do M=M..r.." "if E%8==0 then M=M.." "end end;print(M)end;local function N(r)local A=math.floor(r:byte(8)/128)local O=k(r:byte(8),127)*16+m(r:byte(7),4)-1023;local P={k(r:byte(7),15),r:byte(6),r:byte(5),r:byte(4),r:byte(3),r:byte(2),r:byte(1)}local Q=I(P)for E=1,4 do table.remove(Q,1)end;if A==1 then A=-1 else A=1 end;local R=F(Q)if O==-1023 and R==0 then return 0 end;if O==1024 and R==0 then return 1/0*A end;local S=math.ldexp(1+R,O)return S*A end;local T={}T.dynamic=function(U)local V=type(U)return T[V](U)end;T["nil"]=function(U)table.insert(t,a(0xc0))end;T.boolean=function(U)if U then table.insert(t,a(0xc3))else table.insert(t,a(0xc2))end end;T.number=function(n)if math.floor(n)==n then if n>=0 then if n<128 then table.insert(t,a(n))elseif n<256 then table.insert(t,a(0xcc,n))elseif n<65536 then u(n,0xcd)elseif n<4294967296 then w(n,0xce)else y(n)end else if n>=-32 then table.insert(t,a(0xe0+(n+256)%32))elseif n>=-128 then table.insert(t,a(0xd0,p(n,0x100)))elseif n>=-32768 then u(n,0xd1)elseif n>=-2147483648 then w(n,0xd2)else y(n)end end else y(n)end end;T.string=function(U)local n=#U;if n<32 then table.insert(t,a(0xa0+n))elseif n<65536 then u(n,0xda)elseif n<4294967296 then w(n,0xdb)else error("overflow")end;table.insert(t,U)end;T["function"]=function(U)error("unimplemented:function")end;T.userdata=function(U)error("unimplemented:userdata")end;T.thread=function(U)error("unimplemented:thread")end;T.table=function(U)local W,X,Y=false,0,0;for Z,_ in pairs(U)do if type(Z)=="number"then if Z>Y then Y=Z end else W=true end;X=X+1 end;if W then if X<16 then table.insert(t,a(0x80+X))elseif X<65536 then u(X,0xde)elseif X<4294967296 then w(X,0xdf)else error("overflow")end;for Z,r in pairs(U)do T[type(Z)](Z)T[type(r)](r)end else if Y<16 then table.insert(t,a(0x90+Y))elseif Y<65536 then u(Y,0xdc)elseif Y<4294967296 then w(Y,0xdd)else error("overflow")end;for E=1,Y do T[type(U[E])](U[E])end end end;local a0={[0xc0]="nil",[0xc2]="false",[0xc3]="true",[0xca]="float",[0xcb]="double",[0xcc]="uint8",[0xcd]="uint16",[0xce]="uint32",[0xcf]="uint64",[0xd0]="int8",[0xd1]="int16",[0xd2]="int32",[0xd3]="int64",[0xda]="raw16",[0xdb]="raw32",[0xdc]="array16",[0xdd]="array32",[0xde]="map16",[0xdf]="map32"}local a1=function(n)if a0[n]then return a0[n]elseif n<0xc0 then if n<0x80 then return"fixnum_posi"elseif n<0x90 then return"fixmap"elseif n<0xa0 then return"fixarray"else return"fixraw"end elseif n>0xdf then return"fixnum_neg"else return"undefined"end end;local a2={uint16=2,uint32=4,uint64=8,int16=2,int32=4,int64=8,float=4,double=8}local a3={}local a4=function(a5,a6,a7)local a8,a9,aa,ab,ac,ad,ae,af;if a7>=2 then a8,a9=string.byte(s,a5+1,a5+2)end;if a7>=4 then aa,ab=string.byte(s,a5+3,a5+4)end;if a7>=8 then ac,ad,ae,af=string.byte(s,a5+5,a5+8)end;if a6=="uint16_t"then return a8*256+a9 elseif a6=="uint32_t"then return a8*65536*256+a9*65536+aa*256+ab elseif a6=="int16_t"then local n=a8*256+a9;local ag=(65536-n)*-1;if ag==-65536 then ag=0 end;return ag elseif a6=="int32_t"then local n=a8*65536*256+a9*65536+aa*256+ab;local ag=(4294967296-n)*-1;if ag==-4294967296 then ag=0 end;return ag elseif a6=="double_t"then local M=a(af,ae,ad,ac,ab,aa,a9,a8)b=b+1;local n=N(M)return n else error("unpack_number: not impl:"..a6)end end;local function ah(a5)local ai=a1(string.byte(s,a5+1,a5+1))local a7=a2[ai]local a6;if ai=="float"then error("float is not implemented")else a6=ai.."_t"end;return a5+a7+1,a4(a5+1,a6,a7)end;local function aj(a5,n)local ak={}local Z,r;for E=1,n do a5,Z=a3.dynamic(a5)assert(a5)a5,r=a3.dynamic(a5)assert(a5)ak[Z]=r end;return a5,ak end;local function al(a5,n)local ak={}for E=1,n do a5,ak[E]=a3.dynamic(a5)assert(a5)end;return a5,ak end;function a3.dynamic(a5)if a5>=#s then error("need more data")end;local ai=a1(string.byte(s,a5+1,a5+1))return a3[ai](a5)end;function a3.undefined(a5)error("unimplemented:undefined")end;a3["nil"]=function(a5)return a5+1,nil end;a3["false"]=function(a5)return a5+1,false end;a3["true"]=function(a5)return a5+1,true end;a3.fixnum_posi=function(a5)return a5+1,string.byte(s,a5+1,a5+1)end;a3.uint8=function(a5)return a5+2,string.byte(s,a5+2,a5+2)end;a3.uint16=ah;a3.uint32=ah;a3.uint64=ah;a3.fixnum_neg=function(a5)local n=string.byte(s,a5+1,a5+1)local ag=(256-n)*-1;return a5+1,ag end;a3.int8=function(a5)local E=string.byte(s,a5+2,a5+2)if E>127 then E=(256-E)*-1 end;return a5+2,E end;a3.int16=ah;a3.int32=ah;a3.int64=ah;a3.float=ah;a3.double=ah;a3.fixraw=function(a5)local n=p(string.byte(s,a5+1,a5+1),0x1f+1)local f;if#s-1-a5<n then error("require more data")end;if n>0 then f=string.sub(s,a5+1+1,a5+1+1+n-1)else f=""end;return a5+n+1,f end;a3.raw16=function(a5)local n=a4(a5+1,"uint16_t",2)if#s-1-2-a5<n then error("require more data")end;local f=string.sub(s,a5+1+1+2,a5+1+1+2+n-1)return a5+n+3,f end;a3.raw32=function(a5)local n=a4(a5+1,"uint32_t",4)if#s-1-4-a5<n then error("require more data (possibly bug)")end;local f=string.sub(s,a5+1+1+4,a5+1+1+4+n-1)return a5+n+5,f end;a3.fixarray=function(a5)return al(a5+1,p(string.byte(s,a5+1,a5+1),0x0f+1))end;a3.array16=function(a5)return al(a5+3,a4(a5+1,"uint16_t",2))end;a3.array32=function(a5)return al(a5+5,a4(a5+1,"uint32_t",4))end;a3.fixmap=function(a5)return aj(a5+1,p(string.byte(s,a5+1,a5+1),0x0f+1))end;a3.map16=function(a5)return aj(a5+3,a4(a5+1,"uint16_t",2))end;a3.map32=function(a5)return aj(a5+5,a4(a5+1,"uint32_t",4))end;local am=function(U)t={}T.dynamic(U)local M=table.concat(t,"")return M end;local an=function(M,a5)if a5==nil then a5=0 end;if type(M)~="string"then return false,"invalid argument"end;local U;s=M;a5,U=a3.dynamic(a5)return a5,U end;local function ao()return{double_decode_count=b,double_encode_count=c}end;local ap={pack=am,unpack=an,stat=ao}return ap